<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
<!--spring中的依赖注入
        依赖注入，英文名：Dependency Injection
        IOC作用：
            降低程序耦合
        依赖关系的管理：
            以后都交给spring来维护
        在当前类中需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护，就称为依赖注入。

        依赖注入
            能注入的数据，有三类：
                基本类型和String
                其他bean类型(在配置文件中或注解配置过的bean)
                复杂类型/集合类型
            注入的方式：有三种
                第一种：使用有参构造函数
                第二种：使用set方法
                第三种：使用注解-->

    <!--有参构造函数注入：
        使用的标签：constructor-arg
        标签出现的位置：bean标签内部
        标签中的属性
            type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。参数索引的位置是从0开始
            name：用于指定给构造函数中指定名称的函数赋值
                =====以上三个用于指定给构造函数哪个参数赋值======
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的是在spring核心容器中出现过的bean对象

        优点：
            在获取bean对象时，必须注入数据，否则对象无法创建成功
        缺点：
            改变了bean对象的实例化方式，使我们创建对象时，如果用不到这些数据，也必须提供。
        因此我们更常用set方法注入
            -->

    <bean id="accountService" class="com.myself.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="张三"/>
        <constructor-arg name="age" value="11"/>
        <constructor-arg name="birthday" ref="now"/>
    </bean>
        <!--配置一个日期对象-->
    <bean id="now"  class="java.util.Date"></bean>

    <!--set方法（更常用）
        涉及的标签：property
        出现的位置：bean标签的内部
        标签的属性：
            name：用于指定注入时所调用的set方法名称
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的是在spring核心容器中出现过的bean对象
        优点：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        缺点：
            如果有某个成员必须有值，则获取对象时可能set方法注入忘记写-->
    <bean id="accountService2" class="com.myself.service.impl.AccountServiceImpl2">
        <property name="name" value="李四"/>
        <property name="age" value="10"/>
        <property name="birthday" ref="now"/>
    </bean>

    <!--复杂/集合类型的注入
        用于给List结合注入的标签：
            list array set
        用于给Map集合注入的标签：
            map props
        结构相同，标签可以互换-->
    <bean id="accountService3" class="com.myself.service.impl.AccountServiceImpl3">
        <!--数组-->
        <property name="myStrs">
            <array>
                <value>张三</value>
                <value>李四</value>
                <value>王五</value>
            </array>
        </property>
        <!--list集合-->
        <property name="list">
            <list>
                <value>小鹿</value>
                <value>小熊</value>
                <value>小狗</value>
            </list>
        </property>
        <!--set集合-->
        <property name="set">
            <set>
                <value>小鹿</value>
                <value>小熊</value>
                <value>小狗</value>
            </set>
        </property>
        <!--Map集合-->
        <property name="map">
            <map>
                <entry key="1" value="苹果"></entry>
                <entry key="2" value="小苹果"></entry>
            </map>
        </property>
        <!--Properties-->
        <property name="properties">
            <props>
                <prop key="你好">，我是Properties</prop>
                <prop key="你好">，我还是Properties</prop>
            </props>
        </property>
    </bean>

</beans>