<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把创建对象交给spring管理（ioc控制反转）
        spring对bean的管理方式
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期-->

    <!--1.创建bean的三种方式
            1.1 第一种方式：使用默认构造函数创建
                在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时
                采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建-->
    <!--<bean id="accountService" class="com.myself.service.impl.AccountServiceImpl"></bean>-->

    <!--    1.2 第二种方式：使用某个类中的方法创建对象，并存入spring容器(使用实例工厂创建)-->
    <!--<bean id="instanceFactory" class="com.myself.factory.instanceFactory"></bean>-->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!--    1.3 第三种方式：使用某个类中的静态方法创建对象，并存入spring容器(使用静态工厂创建)-->
    <!--<bean id="accountService" class="com.myself.factory.staticFactory" factory-method="getAccountService"></bean>-->

    <!--2.bean对象的作用范围
            bean标签scope属性
            作用：用于指定bean的作用范围
            取值：
                singleton:单例（默认值）
                prototype:多例
                request:作用于web应用的请求范围
                session:作用于web应用的会话范围
                global-session:作用于集群环境的会话范围（全局绘画范围），当不是集群环境时，它就是session
                                -->
<!--    <bean id="accountService" class="com.myself.factory.staticFactory"
          factory-method="getAccountService" scope="prototype"></bean>-->

    <!--3.bean对象的生命周期
            单例对象
                出生：当容器创建时，对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生：使用对象时，spring为我们创建
                活着：对象在使用过程中，一直活着
                死亡：当对象长时间不用且没有其他对象引用时，由java垃圾回收器回收。-->
    <bean id="accountService" class="com.myself.service.impl.AccountServiceImpl"
    scope = "singleton" init-method="init" destroy-method="destroy"></bean>

</beans>